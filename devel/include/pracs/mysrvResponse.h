// Generated by gencpp from file pracs/mysrvResponse.msg
// DO NOT EDIT!


#ifndef PRACS_MESSAGE_MYSRVRESPONSE_H
#define PRACS_MESSAGE_MYSRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pracs
{
template <class ContainerAllocator>
struct mysrvResponse_
{
  typedef mysrvResponse_<ContainerAllocator> Type;

  mysrvResponse_()
    : age(0)
    , weight(0.0)  {
    }
  mysrvResponse_(const ContainerAllocator& _alloc)
    : age(0)
    , weight(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _age_type;
  _age_type age;

   typedef float _weight_type;
  _weight_type weight;





  typedef boost::shared_ptr< ::pracs::mysrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pracs::mysrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct mysrvResponse_

typedef ::pracs::mysrvResponse_<std::allocator<void> > mysrvResponse;

typedef boost::shared_ptr< ::pracs::mysrvResponse > mysrvResponsePtr;
typedef boost::shared_ptr< ::pracs::mysrvResponse const> mysrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pracs::mysrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pracs::mysrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pracs::mysrvResponse_<ContainerAllocator1> & lhs, const ::pracs::mysrvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.age == rhs.age &&
    lhs.weight == rhs.weight;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pracs::mysrvResponse_<ContainerAllocator1> & lhs, const ::pracs::mysrvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pracs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pracs::mysrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pracs::mysrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pracs::mysrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pracs::mysrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pracs::mysrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pracs::mysrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pracs::mysrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8b79a26fc44475a6d048da6b804d5f69";
  }

  static const char* value(const ::pracs::mysrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8b79a26fc44475a6ULL;
  static const uint64_t static_value2 = 0xd048da6b804d5f69ULL;
};

template<class ContainerAllocator>
struct DataType< ::pracs::mysrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pracs/mysrvResponse";
  }

  static const char* value(const ::pracs::mysrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pracs::mysrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 	age\n"
"float32 weight\n"
;
  }

  static const char* value(const ::pracs::mysrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pracs::mysrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.age);
      stream.next(m.weight);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mysrvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pracs::mysrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pracs::mysrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "age: ";
    Printer<int64_t>::stream(s, indent + "  ", v.age);
    s << indent << "weight: ";
    Printer<float>::stream(s, indent + "  ", v.weight);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRACS_MESSAGE_MYSRVRESPONSE_H
