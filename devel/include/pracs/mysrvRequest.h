// Generated by gencpp from file pracs/mysrvRequest.msg
// DO NOT EDIT!


#ifndef PRACS_MESSAGE_MYSRVREQUEST_H
#define PRACS_MESSAGE_MYSRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pracs
{
template <class ContainerAllocator>
struct mysrvRequest_
{
  typedef mysrvRequest_<ContainerAllocator> Type;

  mysrvRequest_()
    : name()  {
    }
  mysrvRequest_(const ContainerAllocator& _alloc)
    : name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;





  typedef boost::shared_ptr< ::pracs::mysrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pracs::mysrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct mysrvRequest_

typedef ::pracs::mysrvRequest_<std::allocator<void> > mysrvRequest;

typedef boost::shared_ptr< ::pracs::mysrvRequest > mysrvRequestPtr;
typedef boost::shared_ptr< ::pracs::mysrvRequest const> mysrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pracs::mysrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pracs::mysrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pracs::mysrvRequest_<ContainerAllocator1> & lhs, const ::pracs::mysrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pracs::mysrvRequest_<ContainerAllocator1> & lhs, const ::pracs::mysrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pracs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pracs::mysrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pracs::mysrvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pracs::mysrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pracs::mysrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pracs::mysrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pracs::mysrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pracs::mysrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c1f3d28f1b044c871e6eff2e9fc3c667";
  }

  static const char* value(const ::pracs::mysrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc1f3d28f1b044c87ULL;
  static const uint64_t static_value2 = 0x1e6eff2e9fc3c667ULL;
};

template<class ContainerAllocator>
struct DataType< ::pracs::mysrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pracs/mysrvRequest";
  }

  static const char* value(const ::pracs::mysrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pracs::mysrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#rossrv show     $(PACKAGE)/$(FILE.srv)				##For Reading\n"
"#rossrv show -r  $(PACKAGE)/$(FILE.srv)				##For Reading Raw\n"
"#echo \"field type variable\" > srv/$(FILE.srv)       ##For Writing \n"
"\n"
"#AFTER EDITING, cd ~/catkin_ws; catkin_make #compile srv\n"
"\n"
"#FIELD_TYPE VARIABLE Format\n"
"\n"
"#REQUEST\n"
"#-------------\n"
"#RESPONSE\n"
"\n"
"\n"
"string name\n"
;
  }

  static const char* value(const ::pracs::mysrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pracs::mysrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mysrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pracs::mysrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pracs::mysrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRACS_MESSAGE_MYSRVREQUEST_H
